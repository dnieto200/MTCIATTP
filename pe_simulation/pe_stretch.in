##################################################
# LAMMPS input script for PE minimization
##################################################
#
units           real
atom_style      full
boundary        p p p
processors      * * *
#
pair_style      lj/cut 10.76
#pair_style      lj/long/coul/long long off 9.085
pair_modify     tail yes
#kspace_style    pppm/disp 0.00001
#kspace_modify   gewald/disp 0.28
#
#special_bonds   lj 0.0 0.0 0.0
bond_style      harmonic
angle_style     harmonic
#dihedral_style  opls
dihedral_style  multi/harmonic
improper_style none

#
read_data      data.run1000  #AmPEN30C1000.dat #AmPEN60C1000.dat
#
# To use the restart comment the above lines AND the velocity
print "loaded data w/o problems"
#
# Define some variables
#
pair_coeff 1 1 0.001 6.400 14.720
pair_coeff 1 2 0.004 5.540 12.742
pair_coeff 1 3 0.010 5.180 11.870
pair_coeff 1 4 0.014 5.075 11.673
pair_coeff 1 5 0.017 5.065 11.650
pair_coeff 2 2 0.020 4.680 10.764
pair_coeff 2 3 0.043 4.315 9.925
pair_coeff 2 4 0.062 4.215 9.695
pair_coeff 2 5 0.076 4.205 9.672
pair_coeff 3 3 0.092 3.950 9.090
pair_coeff 3 4 0.133 3.850 8.855
pair_coeff 3 5 0.164 3.840 8.832
pair_coeff 4 4 0.195 3.750 8.625
pair_coeff 4 5 0.239 3.740 8.602
pair_coeff 5 5 0.294 3.730 8.579

variable    T equal 450 
variable    V equal vol
variable    dt equal 1.0
variable    p equal 100      # correlation length default 200
variable    s equal 10      # sample interval
variable    d equal $p*$s   # dump interval

variable        EMINstep    equal 10000       # 50000
variable        MDTempEquil equal 50000       # 50000
variable        MDNVTEquil  equal 50000       # 1000000
variable        MDNPTEquil  equal 50000       # 1000000
variable        MDProd      equal 1000000       # ...
variable        DumpMOV     equal 10000
variable        DumpThermo  equal ${d}
variable        DumpRestart equal 10000

# convert from LAMMPS real units to SI
variable    kB equal 1.3806504e-23    # [J/K] Boltzmann
variable    kCal2J equal 4186.0/6.02214e23
variable    A2m equal 1.0e-10
variable    fs2s equal 1.0e-15
variable    convert equal ${kCal2J}*${kCal2J}/${fs2s}/${A2m}
# setup problem

#dimension    3
timestep     ${dt}
variable     temp equal $T

#print "defined variables"
#
#pair_coeff   1 1 0.020 3.95
#print "pair coeff ok"
#bond_coeff     1 95.8826 1.54
#print "bond coeff ok"
#angle_coeff    1 62.1001 114.0
#print "angle coeff ok"
#dihedral_coeff 1 1.989191304 -4.232744733 -0.602122842 +7.177781209 4.425503531 -3.906843261 -8.920559205 +3.449786318 5.59795395

group           mobile union all
#
thermo_style    custom step cpu temp ke pe ebond eangle edihed evdwl pxx pyy pzz 
thermo          ${DumpThermo}
#thermo_modify  line multi
#thermo_modify   flush yes

# #
# Start of sample relaxation
# #

# Minimization
min_style       hftn
minimize        1.0e-9 1.0e-9 ${EMINstep} 500000

dump            d_mov all custom ${DumpMOV} mov.lammpstrj id type xu yu zu
dump_modify     d_mov sort id

# Assign the initial velocities
velocity     all create $T 102486 mom yes rot yes dist gaussian

# Initial temperature equilibration
fix fnve all nve
fix fvelrsc all temp/rescale 100 $T $T 5 0.5

run ${MDTempEquil}

unfix fnve
unfix fvelrsc

# Nose-Hoover temperature equilibration
fix fnvt all nvt temp $T $T 100

run ${MDNVTEquil}

unfix fnvt

# Pressure equilibration
fix fnpt all npt temp $T $T 100 iso 1.0 1.0 1000.0
#fix fnpt all npt temp $T $T 100 y 1.0 1.0 1000.0 z 1.0 1.0 1000.0 couple none

run ${MDNPTEquil}

unfix fnpt

#undump          d_mov
# #
# End of sample relaxation
# #

variable Lx equal (xhi-xlo)
variable Ly equal (yhi-ylo)
variable Lz equal (zhi-zlo)
variable L0 equal ${Lx}
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"

# thermal conductivity calculation, switch to NVE if desired
# TEMPORARY INTERGATOR
#fix fnvt all nvt temp $T $T 100
fix fnpt all npt temp $T $T 100 y 1.0 1.0 1000.0 z 1.0 1.0 1000.0 couple none
#fix def  all deform 1 x trate 0.000007 y volume z volume remap v
fix def  all deform 1 x trate 0.0000007 remap v
#unfix       NVT
#fix         NVE all nve

#print "volume $V"
reset_timestep 0
compute      myKE all ke/atom
#variable     KinE equalt trap(f_myKE)
#print        "$KinE"
#compute      myPE all pe/atom
compute      myStress all stress/atom NULL
compute      Tau all reduce ave c_myStress[1] c_myStress[2] c_myStress[3]
compute      Tau2 all pressure thermo_temp
#compute      flux all heat/flux myKE myPE myStress
#fix          ave all ave/time $s $p $d v_k11 file k.evol
#variable Nfreq equal 1000
variable Nevery equal 1
variable Nrepeat equal 1000
variable myLambda equal v_Lx/v_L0
variable mySigma equal (c_Tau[1]-(c_Tau[2]+c_Tau[3])/2)
variable mySigma2 equal (-c_Tau2[1]+(c_Tau2[2]+c_Tau2[3])/2)

fix ave all ave/time ${Nevery} ${Nrepeat} 2000 v_myLambda v_mySigma v_mySigma2 file Tau.evol

#thermo_style custom step temp v_Jx v_Jy v_Jz v_TS v_NS v_k11 v_k22 v_k33 v_k12 v_k13 v_k23

#############################
##   Compute the stress during stretching
############################


run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"
run          $(v_MDProd/4)
write_data data.*
print "" 
print "Lx =  ${Lx} ; Ly =  ${Ly} ; Lz =  ${Lz}"

quit
